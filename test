    const AdminDashboard = () => {
        const { user, token, logout } = useAuth();
        const [activeTab, setActiveTab] = useState('pending');
        const [pendingItems, setPendingItems] = useState([]);
        const [users, setUsers] = useState([]);
        const [locations, setLocations] = useState([]);
        const [loading, setLoading] = useState(true);
        const [showLocationModal, setShowLocationModal] = useState(false);
        const [newLocation, setNewLocation] = useState({ name: '', description: '' });
        const [currentTerms, setCurrentTerms] = useState('');
        const [editingTerms, setEditingTerms] = useState('');
        const [savingTerms, setSavingTerms] = useState(false);
        const [approvedItems, setApprovedItems] = useState([]);
        const [rejectedItems, setRejectedItems] = useState([]);
        const { showSuccess, showError, showConfirm, showPrompt } = useNotification(); 
        const [showProfileModal, setShowProfileModal] = useState(false); 
    
        // FIXED: Enhanced loadData with better error handling
        const loadData = React.useCallback(async () => {
        setLoading(true);
        try {
            // ALWAYS load everything, regardless of active tab
            const [pending, users, locations, approved, rejected] = await Promise.all([
            apiService.getPendingItems(token),
            apiService.getUsers(token), 
            apiService.getLocations(),
            apiService.getApprovedItems(token),
            apiService.getRejectedItems(token)
            ]);
            
            setPendingItems(pending || []);
            setUsers(users || []);
            setLocations(locations || []);
            setApprovedItems(approved || []);
            setRejectedItems(rejected || []);
            
        } catch (error) {
            console.error('Error:', error);
        } finally {
            setLoading(false);
        }
        }, [token]); // Remove activeTab dependency
        useEffect(() => {
        if (token && user) {
            loadData();
        }
        }, [loadData, token, user]);
    
        // FIXED: Enhanced item approval with error handling
        const handleApproveItem = async (itemId) => {
        try {
            console.log('✅ Approving item:', itemId);
            await apiService.approveItem(itemId, token);
            console.log('✅ Item approved successfully');
            
            // Remove from pending list immediately for better UX
            setPendingItems(prev => prev.filter(item => item.item_id !== itemId));
            
            // Also reload data to be sure
            await loadData();
        } catch (error) {
            console.error('❌ Error approving item:', error);
            alert('Failed to approve item: ' + error.message);
        }
        };
    
        // FIXED: Enhanced item rejection with error handling
        const handleRejectItem = async (itemId) => {
        const reason = await showPrompt('Reject Item', 'Enter rejection reason:', 'Please provide a reason...');
        if (!reason || !reason.trim()) {
            return;
        }
        
        try {
            await apiService.rejectItem(itemId, reason.trim(), token);
            showSuccess('Item rejected successfully');
            await loadData();
        } catch (error) {
            showError('Failed to reject item: ' + error.message);
        }
        };
    
        // FIXED: Enhanced user status toggle with error handling
        const handleToggleUserStatus = async (googleId, currentStatus) => {
        const newStatus = !currentStatus;
        const action = newStatus ? 'activate' : 'suspend';
        
        if (!window.confirm(`Are you sure you want to ${action} this user?`)) {
            return;
        }
    
        try {
            console.log(`🔄 ${action} user:`, googleId, 'New status:', newStatus);
            await apiService.updateUserStatus(googleId, newStatus, token);
            console.log(`✅ User ${action}d successfully`);
            
            // Update the user in the list immediately for better UX
            setUsers(prev => prev.map(user => 
            user.google_id === googleId 
                ? { ...user, is_active: newStatus }
                : user
            ));
            
            // Also reload data to be sure
            await loadData();
        } catch (error) {
            console.error(`❌ Error ${action}ing user:`, error);
            alert(`Failed to ${action} user: ` + error.message);
        }
        };
    
    // Add delete user function with safety checks
    const handleDeleteUser = async (googleId, userName) => {
        const confirmed = await showConfirm(
        '⚠️ Delete User', 
        `This will permanently delete "${userName}" and ALL their items! This cannot be undone.`
        );
        
        if (!confirmed) return;
        
        const confirmText = await showPrompt(
        'Final Confirmation', 
        `Type exactly: DELETE ${userName}`, 
        'DELETE confirmation...'
        );
        
        if (confirmText !== `DELETE ${userName}`) {
        showError('Deletion cancelled - confirmation text did not match.');
        return;
        }
        
        try {
        await apiService.deleteUser(googleId, token);
        showSuccess(`User "${userName}" deleted successfully`);
        await loadData();
        } catch (error) {
        showError('Failed to delete user: ' + error.message);
        }
    };
        
    
        // FIXED: Enhanced location creation with validation
        const handleAddLocation = async (e) => {
        e.preventDefault();
        
        // Validate input
        if (!newLocation.name || !newLocation.name.trim()) {
            alert('Please enter a location name');
            return;
        }
    
        try {
            console.log('📍 Adding location:', newLocation);
            const result = await apiService.createLocation({
            name: newLocation.name.trim(),
            description: newLocation.description.trim()
            }, token);
            
            console.log('✅ Location added:', result);
            
            // Reset form and close modal
            setShowLocationModal(false);
            setNewLocation({ name: '', description: '' });
            
            // Add to locations list immediately for better UX
            if (result.location_id) {
            setLocations(prev => [...prev, {
                location_id: result.location_id,
                name: newLocation.name.trim(),
                description: newLocation.description.trim()
            }]);
            }
            
            // Also reload data to be sure
            await loadData();
        } catch (error) {
            console.error('❌ Error adding location:', error);
            alert('Failed to add location: ' + error.message);
        }
        };
        const handleDeleteLocation = async (locationId, locationName) => {
        if (!window.confirm(`Are you sure you want to delete "${locationName}"? This action cannot be undone.`)) {
            return;
        }
        
        try {
            console.log('🗑️ Deleting location:', locationId);
            await apiService.deleteLocation(locationId, token);
            console.log('✅ Location deleted successfully');
            
            // Remove from list immediately for better UX
            setLocations(prev => prev.filter(loc => loc.location_id !== locationId));
            
            // Also reload data to be sure
            await loadData();
        } catch (error) {
            console.error('❌ Error deleting location:', error);
            alert('Failed to delete location: ' + error.message);
        }
        };
        const handleLogout = () => {
        logout(); // ✅ Just call logout - your custom modal will handle confirmation
        };
    
        
        // Loading state
        if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
            <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
                <p className="text-gray-600">Loading admin data...</p>
            </div>
            </div>
        );
        }
    
        return (
        <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <header className="bg-white shadow-sm border-b">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex justify-between items-center py-4">
                <div className="flex items-center">
                    <Shield className="w-8 h-8 text-green-600 mr-2" />
                    <h1 className="text-2xl font-bold text-green-800">Admin Dashboard</h1>
                </div>
                <div className="flex items-center space-x-4">
                    <div className="flex items-center">
                    <User className="w-6 h-6 text-gray-600 mr-2" />
                    <span className="text-gray-700">{user?.name || 'Admin'}</span>
                    </div>
                    <button
                    onClick={() => setShowProfileModal(true)}
                    className="flex items-center px-3 py-2 text-gray-700 hover:text-gray-900 transition-colors"
                    title="Profile Settings"
                    >
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    Settings
                    </button>
                    <button
                    onClick={handleLogout}
                    className="flex items-center px-3 py-2 text-gray-700 hover:text-gray-900"
                    >
                    <LogOut className="w-4 h-4 mr-1" />
                    Logout
                    </button>
                </div>
                </div>
            </div>
            </header>
    
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Tabs */}
            <div className="mb-6">
                <div className="flex space-x-1 bg-gray-200 p-1 rounded-lg">
                <button
                    onClick={() => setActiveTab('pending')}
                    className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                    activeTab === 'pending' ? 'bg-white text-green-700 shadow-sm' : 'text-gray-600 hover:text-gray-800'
                    }`}
                >
                    Pending Items ({pendingItems.length})
                </button>
                <button
                    onClick={() => setActiveTab('approved')}
                    className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                    activeTab === 'approved' ? 'bg-white text-green-700 shadow-sm' : 'text-gray-600 hover:text-gray-800'
                    }`}
                >
                    Approved ({approvedItems.length})
                </button>
                
                <button
                    onClick={() => setActiveTab('rejected')}
                    className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                    activeTab === 'rejected' ? 'bg-white text-green-700 shadow-sm' : 'text-gray-600 hover:text-gray-800'
                    }`}
                >
                    Rejected ({rejectedItems.length})
                </button>
                <button
                    onClick={() => setActiveTab('users')}
                    className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                    activeTab === 'users' ? 'bg-white text-green-700 shadow-sm' : 'text-gray-600 hover:text-gray-800'
                    }`}
                >
                    Users ({users.length})
                </button>
                <button
                    onClick={() => setActiveTab('locations')}
                    className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                    activeTab === 'locations' ? 'bg-white text-green-700 shadow-sm' : 'text-gray-600 hover:text-gray-800'
                    }`}
                >
                    Locations ({locations.length})
                </button>
                
                <button
                onClick={() => setActiveTab('terms')}
                className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                    activeTab === 'terms' ? 'bg-white text-green-700 shadow-sm' : 'text-gray-600 hover:text-gray-800'
                }`}
                >
                Terms & Conditions
                </button>
                </div>
            </div>
    
            {/* Content */}
            {activeTab === 'pending' && (
                <div className="space-y-4">
                <h2 className="text-xl font-semibold text-gray-800">Items Pending Approval</h2>
                {pendingItems.length === 0 ? (
                    <div className="text-center py-8">
                    <p className="text-gray-500">No pending items</p>
                    <p className="text-gray-400 text-sm mt-1">All items have been reviewed</p>
                    </div>
                ) : (
                
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {pendingItems.map(item => (
                    <div key={item.item_id || item.name} className="bg-white rounded-lg shadow-md overflow-hidden">
                        {/* Handle different image field names */}
                        {(item.images || item.image_urls) && (item.images || item.image_urls).length > 0 && (
                        <img 
                            src={(item.images || item.image_urls)[0]} 
                            alt={item.name} 
                            className="w-full h-400 object-cover"
                            onError={(e) => e.target.style.display = 'none'}
                        />
                        )}
                        <div className="p-4">
                        <h3 className="text-lg font-semibold mb-2">{item.name}</h3>
                        <p className="text-gray-600 mb-2">Quantity: {item.quantity}</p>
                        <p className="text-gray-600 mb-2">Category: {item.category}</p>
                        <p className="text-gray-600 mb-2">Location: {item.location}</p>
                        <p className="text-gray-600 mb-2">Owner: {item.owner_email || item.owner_name || 'Unknown'}</p>
                        {item.comments && (
                            <p className="text-gray-600 mb-4 text-sm italic">"{item.comments}"</p>
                        )}
                        
                            
                        <div className="flex space-x-2">
                            <button
                            onClick={() => handleApproveItem(item.item_id)} // ✅ Use item.item_id (the real UUID)
                            className="flex items-center px-3 py-1 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors"
                            >
                            <Check className="w-4 h-4 mr-1" />
                            Approve
                            </button>
                            <button
                            onClick={() => handleRejectItem(item.item_id)} // ✅ Use item.item_id (the real UUID)
                            className="flex items-center px-3 py-1 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
                            >
                            <X className="w-4 h-4 mr-1" />
                            Reject
                            </button>
                        </div>
                        </div>
                    </div>
                    ))}
                </div>
    
                )}
                </div>
            )}
    
    
    {activeTab === 'approved' && (
                <div className="space-y-4">
                <h2 className="text-xl font-semibold text-gray-800">Approved Items</h2>
                {approvedItems.length === 0 ? (
                    <div className="text-center py-8">
                    <p className="text-gray-500">No approved items</p>
                    <p className="text-gray-400 text-sm mt-1">Approved items will appear here</p>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {approvedItems.map(item => (
                        <div key={item.item_id || item.name} className="bg-white rounded-lg shadow-md overflow-hidden">
                        {(item.images || item.image_urls) && (item.images || item.image_urls).length > 0 && (
                            <img 
                            src={(item.images || item.image_urls)[0]} 
                            alt={item.name} 
                            className="w-full h-400 object-cover"
                            onError={(e) => e.target.style.display = 'none'}
                            />
                        )}
                        <div className="p-4">
                            <h3 className="text-lg font-semibold mb-2">{item.name}</h3>
                            <p className="text-gray-600 mb-2">Quantity: {item.quantity}</p>
                            <p className="text-gray-600 mb-2">Category: {item.category}</p>
                            <p className="text-gray-600 mb-2">Location: {item.location}</p>
                            <p className="text-gray-600 mb-2">Owner: {item.owner_email || item.owner_name || 'Unknown'}</p>
                            <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                            ✅ Approved
                            </span>
                        </div>
                        </div>
                    ))}
                    </div>
                )}
                </div>
            )}
    
            {activeTab === 'rejected' && (
                <div className="space-y-4">
                <h2 className="text-xl font-semibold text-gray-800">Rejected Items</h2>
                {rejectedItems.length === 0 ? (
                    <div className="text-center py-8">
                    <p className="text-gray-500">No rejected items</p>
                    <p className="text-gray-400 text-sm mt-1">Rejected items will appear here</p>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {rejectedItems.map(item => (
                        <div key={item.item_id || item.name} className="bg-white rounded-lg shadow-md overflow-hidden">
                        {(item.images || item.image_urls) && (item.images || item.image_urls).length > 0 && (
                            <img 
                            src={(item.images || item.image_urls)[0]} 
                            alt={item.name} 
                            className="w-full h-400 object-cover"
                            onError={(e) => e.target.style.display = 'none'}
                            />
                        )}
                        <div className="p-4">
                            <h3 className="text-lg font-semibold mb-2">{item.name}</h3>
                            <p className="text-gray-600 mb-2">Quantity: {item.quantity}</p>
                            <p className="text-gray-600 mb-2">Category: {item.category}</p>
                            <p className="text-gray-600 mb-2">Location: {item.location}</p>
                            <p className="text-gray-600 mb-2">Owner: {item.owner_email || item.owner_name || 'Unknown'}</p>
                            {item.rejection_reason && (
                            <p className="text-red-600 mb-2 text-sm">Reason: {item.rejection_reason}</p>
                            )}
                            <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                            ❌ Rejected
                            </span>
                        </div>
                        </div>
                    ))}
                    </div>
                )}
                </div>
            )}
    
            {activeTab === 'users' && (
                <div className="space-y-4">
                <h2 className="text-xl font-semibold text-gray-800">User Management</h2>
                {users.length === 0 ? (
                    <div className="text-center py-8">
                    <p className="text-gray-500">No users found</p>
                    <p className="text-gray-400 text-sm mt-1">Users will appear here once they sign up</p>
                    </div>
                ) : (
                    <div className="bg-white rounded-lg shadow overflow-hidden">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                        {users.map(userData => (
                            <tr key={userData.google_id || userData.user_id}>
                            <td className="px-6 py-4 whitespace-nowrap">
                                <div className="flex items-center">
                                <img 
                                    className="h-10 w-10 rounded-full" 
                                    src={userData.profile_picture || '/placeholder-avatar.png'} 
                                    alt="" 
                                    onError={(e) => e.target.src = '/placeholder-avatar.png'}
                                />
                                <div className="ml-4">
                                    <div className="text-sm font-medium text-gray-900">{userData.name}</div>
                                </div>
                                </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{userData.email}</td>
                            <td className="px-6 py-4 whitespace-nowrap">
                                <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                userData.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                }`}>
                                {userData.is_active ? 'Active' : 'Suspended'}
                                </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {userData.last_login ? new Date(userData.last_login).toLocaleString() : 'Never'}
                            </td>
    
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div className="flex space-x-3">
                                <button
                                    onClick={() => handleToggleUserStatus(userData.google_id || userData.user_id, userData.is_active)}
                                    className={`text-indigo-600 hover:text-indigo-900 transition-colors ${
                                    userData.is_active ? 'text-red-600 hover:text-red-900' : 'text-green-600 hover:text-green-900'
                                    }`}
                                >
                                    {userData.is_active ? 'Suspend' : 'Activate'}
                                </button>
                                
                                <button
                                    onClick={() => handleDeleteUser(userData.google_id || userData.user_id, userData.name)}
                                    className="text-red-800 hover:text-red-900 transition-colors font-bold"
                                    title="⚠️ Permanently delete user and all their items"
                                >
                                    Delete
                                </button>
                                </div>
                            </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                    </div>
                )}
                </div>
            )}
    
            {activeTab === 'locations' && (
                <div className="space-y-4">
                <div className="flex justify-between items-center">
                    <h2 className="text-xl font-semibold text-gray-800">Campus Locations</h2>
                    <button
                    onClick={() => setShowLocationModal(true)}
                    className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                    >
                    <Plus className="w-4 h-4 mr-1" />
                    Add Location
                    </button>
                </div>
                
                {locations.length === 0 ? (
                    <div className="text-center py-8">
                    <p className="text-gray-500">No locations added</p>
                    <p className="text-gray-400 text-sm mt-1">Add campus locations for item pickup/dropoff</p>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {locations.map(location => (
                        <div key={location.location_id || location.name} className="bg-white p-4 rounded-lg shadow">
                            <div className="flex justify-between items-start mb-2">
                            <h3 className="font-semibold text-gray-800">{location.name}</h3>
                            <button
                                onClick={() => handleDeleteLocation(location.location_id, location.name)}
                                className="text-red-500 hover:text-red-700 p-1 rounded hover:bg-red-50 transition-colors"
                                title="Delete location"
                            >
                                <Trash2 className="w-4 h-4" />
                            </button>
                            </div>
                            {location.description && (
                            <p className="text-gray-600 text-sm">{location.description}</p>
                            )}
                        </div>
                        ))}
                    </div>
                )}
                </div>
            )}
    
    
    
    
            {activeTab === 'terms' && (
                <div className="space-y-4">
                <h2 className="text-xl font-semibold text-gray-800">Terms & Conditions Management</h2>
                <p className="text-gray-600">Customize the terms and conditions that new users must accept.</p>
                
                <div className="bg-white rounded-lg shadow p-6">
                    <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Terms & Conditions Content
                    </label>
                    <textarea
                        value={editingTerms}
                        onChange={(e) => setEditingTerms(e.target.value)}
                        className="w-full h-64 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-green-500 font-mono text-sm"
                        placeholder="Enter your terms and conditions..."
                    />
                    </div>
                    
                    <div className="flex justify-between items-center">
                    <button
                        onClick={async () => {
                        try {
                            const result = await apiService.getTermsContent();
                            setCurrentTerms(result.content);
                            setEditingTerms(result.content);
                        } catch (error) {
                            alert('Failed to load current terms');
                        }
                        }}
                        className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
                    >
                        Load Current Terms
                    </button>
                    
                    <button
                        onClick={async () => {
                        if (!editingTerms.trim()) {
                            alert('Please enter terms content');
                            return;
                        }
                        
                        setSavingTerms(true);
                        try {
                            await apiService.updateTermsContent(editingTerms, token);
                            setCurrentTerms(editingTerms);
                            alert('Terms updated successfully! New users will see the updated terms.');
                        } catch (error) {
                            alert('Failed to update terms: ' + error.message);
                        } finally {
                            setSavingTerms(false);
                        }
                        }}
                        disabled={savingTerms}
                        className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
                    >
                        {savingTerms ? 'Saving...' : 'Update Terms'}
                    </button>
                    </div>
                </div>
                </div>
            )}
    
    
            </div>
    
            {/* Add Location Modal */}
            {showLocationModal && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4">
                <h3 className="text-lg font-bold mb-4">Add New Location</h3>
                <form onSubmit={handleAddLocation}>
                    <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Location Name <span className="text-red-500">*</span>
                    </label>
                    <input
                        type="text"
                        value={newLocation.name}
                        onChange={(e) => setNewLocation({...newLocation, name: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-green-500"
                        required
                        placeholder="e.g., Main Building Lobby"
                    />
                    </div>
                    <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">Description (Optional)</label>
                    <textarea
                        value={newLocation.description}
                        onChange={(e) => setNewLocation({...newLocation, description: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-green-500"
                        rows="3"
                        placeholder="Additional details about the location..."
                    />
                    </div>
                    <div className="flex space-x-3">
                    <button
                        type="submit"
                        className="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors"
                    >
                        Add Location
                    </button>
                    <button
                        type="button"
                        onClick={() => {
                        setShowLocationModal(false);
                        setNewLocation({ name: '', description: '' });
                        }}
                        className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition-colors"
                    >
                        Cancel
                    </button>
                    </div>
                </form>
                </div>
            </div>
            )}
    
            {showProfileModal && (
                    <AdminProfile 
                        onClose={() => setShowProfileModal(false)} 
                    />
                    )}
    
            
        </div>
        );
    };
    