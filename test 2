const UserDashboard = () => {
  const { user, token, logout } = useAuth();
  const [items, setItems] = useState([]);
  const [filteredItems, setFilteredItems] = useState([]);
  const [locations, setLocations] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('');
  const [filterLocation, setFilterLocation] = useState('');
  const [activeTab, setActiveTab] = useState('all');
  const [myClaims, setMyClaims] = useState([]);
  const [chatState, setChatState] = useState({});
  const [chatMessages, setChatMessages] = useState({});
  const [newMessages, setNewMessages] = useState({});
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showTermsModal, setShowTermsModal] = useState(false);
  const { showSuccess, showError, showConfirm } = useNotification();
  const [aiRecommendations, setAiRecommendations] = useState('');
  const [aiLoading, setAiLoading] = useState(false);
  const [aiError, setAiError] = useState('');
  
  // 📱 NEW: Sidebar state for ALL screen sizes
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  const loadData = React.useCallback(async () => {
    console.log('🔄 Loading data... User:', user?.email, 'Token:', !!token);
    
    try {
      const [itemsRes, locationsRes, categoriesRes, claimsRes] = await Promise.all([
        apiService.getItems({ approved_only: true }),
        apiService.getLocations(),
        apiService.getCategories(),
        apiService.getMyClaims(token)
      ]);
      
      console.log('📊 Data loaded:', {
        items: itemsRes?.length || 0,
        locations: locationsRes?.length || 0, 
        categories: categoriesRes?.length || 0,
        claims: claimsRes?.length || 0
      });
      
      // Ensure arrays with fallbacks
      setItems(Array.isArray(itemsRes) ? itemsRes : []);
      setLocations(Array.isArray(locationsRes) ? locationsRes : []);
      setCategories(Array.isArray(categoriesRes) ? categoriesRes : []);
      setMyClaims(Array.isArray(claimsRes) ? claimsRes : []);
      
      console.log('✅ Data set successfully');
      
    } catch (error) {
      console.error('❌ Error loading data:', error);
      // Set empty arrays on error
      setItems([]);
      setLocations([]);
      setCategories([]);
      setMyClaims([]);
    } finally {
      setLoading(false);
    }
  }, [token]);

  // FIXED: Enhanced filterItems with better user matching
  const filterItems = React.useCallback(() => {
    console.log('🔍 Filtering items...', {
      totalItems: items.length,
      activeTab,
      user: user?.email,
      searchTerm,
      filterCategory,
      filterLocation
    });
    
    let filtered = [...items]; // Create copy to avoid mutations
    
    // Filter by tab
    if (activeTab === 'my-items') {
      filtered = filtered.filter(item => {
        const isMyItem = item.owner_email === user?.email || 
                        item.owner_id === user?.user_id ||
                        item.owner_id === user?.google_id;
        console.log('My item check:', { item: item.name, owner_email: item.owner_email, user_email: user?.email, isMyItem });
        return isMyItem;
      });
    } else if (activeTab === 'claimed') {
      filtered = filtered.filter(item => {
        const isMyClaim = item.claimant_email === user?.email ||
                         item.claimed_by === user?.user_id ||
                         item.claimed_by === user?.google_id;
        console.log('My claim check:', { item: item.name, claimant_email: item.claimant_email, user_email: user?.email, isMyClaim });
        return isMyClaim;
      });
    } else if (activeTab === 'all') {
      // ✅ NEW: Hide my own items from "All Items" tab
      filtered = filtered.filter(item => {
        const isMyItem = item.owner_email === user?.email || 
                        item.owner_id === user?.user_id ||
                        item.owner_id === user?.google_id;
        return !isMyItem; // Show everything EXCEPT my items
      });
    }
    
    // Filter by search term
    if (searchTerm && searchTerm.trim()) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(item =>
        item.name?.toLowerCase().includes(searchLower) ||
        item.comments?.toLowerCase().includes(searchLower) ||
        item.category?.toLowerCase().includes(searchLower)
      );
    }
    
    // Filter by category
    if (filterCategory) {
      filtered = filtered.filter(item => item.category === filterCategory);
    }
    
    // Filter by location
    if (filterLocation) {
      filtered = filtered.filter(item => item.location === filterLocation);
    }
    
    console.log('🎯 Filtering result:', {
      original: items.length,
      filtered: filtered.length,
      activeTab
    });
    
    setFilteredItems(filtered);
  }, [items, searchTerm, filterCategory, filterLocation, activeTab, user?.email, user?.user_id, user?.google_id]);

  // FIXED: Proper useEffect dependencies
  useEffect(() => {
    if (token && user) {
      loadData();
    }
  }, [loadData, token, user]);

  useEffect(() => {
    filterItems();
  }, [filterItems]);

  // FIXED: Enhanced item handlers with better error handling
  const handleAddItem = async (formData) => {
    try {
      const result = await apiService.createItem(formData, token);
      setShowModal(false);
      showSuccess('Item submitted for approval!'); 
      await loadData();
    } catch (error) {
      showError('❌ Failed to add item: ' + error.message);
    }
  };
  
  const handleEditItem = async (formData) => {
    try {
      console.log('✏️ Editing item:', editingItem?.item_id, formData);
      const result = await apiService.updateItem(editingItem.item_id, formData, token);
      console.log('✅ Item updated:', result);
      setShowModal(false);
      setEditingItem(null);
      await loadData(); // Reload data
    } catch (error) {
      console.error('❌ Error updating item:', error);
      alert('Failed to update item: ' + error.message);
    }
  };

  const handleDeleteItem = async (itemId) => {
    const confirmed = await showConfirm('Delete Item', 'Are you sure you want to delete this item?');
    if (confirmed) {
      try {
        await apiService.deleteItem(itemId, token);
        showSuccess('Item deleted successfully');
        await loadData();
      } catch (error) {
        showError('Failed to delete item: ' + error.message);
      }
    }
  };

  const handleClaimItem = async (itemId) => {
    try {
      console.log('🎯 Claiming item:', itemId);
      const result = await apiService.claimItem(itemId, token);
      console.log('✅ Item claimed:', result);
      await loadData(); // Reload data
    } catch (error) {
      console.error('❌ Error claiming item:', error);
      alert('Failed to claim item: ' + error.message);
    }
  };

  const handleChatToggle = async (itemId) => {
    console.log('💬 Toggling chat for item:', itemId);
    
    setChatState(prev => ({
      ...prev,
      [itemId]: !prev[itemId]
    }));

    if (!chatState[itemId]) {
      try {
        const messages = await apiService.getChatMessages(itemId, token);
        console.log('📨 Chat messages loaded:', messages);
        setChatMessages(prev => ({
          ...prev,
          [itemId]: messages
        }));
      } catch (error) {
        console.error('❌ Error loading chat messages:', error);
      }
    }
  };

  // Add this component BEFORE the UserDashboard component
  const TermsViewModal = ({ isOpen, onClose }) => {
    const [termsContent, setTermsContent] = useState('');
    const [loading, setLoading] = useState(true);

    useEffect(() => {
      if (isOpen) {
        loadTermsContent();
      }
    }, [isOpen]);

    const loadTermsContent = async () => {
      try {
        const response = await fetch(`${API_BASE}/terms-content`);
        const data = await response.json();
        setTermsContent(data.content);
      } catch (error) {
        console.error('Error loading terms:', error);
        setTermsContent('Failed to load terms and conditions.');
      } finally {
        setLoading(false);
      }
    };

    if (!isOpen) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
          <div className="p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold text-gray-900">Rules & Regulations</h2>
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="border-b border-gray-200 mb-4"></div>

            {loading ? (
              <div className="flex items-center justify-center h-64">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
              </div>
            ) : (
              <div className="prose prose-lg max-w-none">
                <div className="whitespace-pre-wrap text-gray-700 leading-relaxed">
                  {termsContent}
                </div>
              </div>
            )}

            <div className="flex justify-end mt-6 pt-4 border-t border-gray-200">
              <button
                onClick={onClose}
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Add this function with your other handlers:
  const handleGetAIRecommendations = async () => {
    setAiLoading(true);
    setAiError('');
    
    try {
      console.log('🤖 Getting AI recommendations...');
      const response = await fetch(`${API_BASE}/get-ai-recommendations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({})
      });
      
      const data = await response.json();
      console.log('🤖 AI response:', data);
      
      if (data.success) {
        setAiRecommendations(data.recommendations);
        showSuccess('AI recommendations loaded! 🌱');
      } else {
        setAiError(data.error || 'Failed to get recommendations');
      }
    } catch (error) {
      console.error('🤖 AI error:', error);
      setAiError('Failed to connect to AI service');
    } finally {
      setAiLoading(false);
    }
  };
  
  const handleLogout = () => {
    logout(); 
  };

  const handleSendMessage = async (itemId) => {
    const message = newMessages[itemId];
    if (!message?.trim()) {
      console.log('⚠️ Empty message, not sending');
      return;
    }

    try {
      console.log('📤 Sending message:', { itemId, message });
      await apiService.sendChatMessage(itemId, message, token);
      
      // Clear the message input
      setNewMessages(prev => ({
        ...prev,
        [itemId]: ''
      }));
      
      // Reload messages
      const messages = await apiService.getChatMessages(itemId, token);
      setChatMessages(prev => ({
        ...prev,
        [itemId]: messages
      }));
      
      console.log('✅ Message sent and messages reloaded');
    } catch (error) {
      console.error('❌ Error sending message:', error);
      alert('Failed to send message: ' + error.message);
    }
  };

  // 📱 Close sidebar when tab changes (mobile UX)
  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setIsSidebarOpen(false); // Close sidebar on mobile after selection
  };

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* 📱 SIDEBAR OVERLAY - ALL SCREEN SIZES */}
      {isSidebarOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={() => setIsSidebarOpen(false)}
        />
      )}

      {/* 🔧 COLLAPSIBLE SIDEBAR - ALL SCREEN SIZES */}
      <div className={`
        fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out
        ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}
      `}>
        {/* Sidebar Header */}
        <div className="flex items-center justify-between p-4 border-b">
          <h2 className="text-lg font-semibold text-green-800">Navigation</h2>
          {/* Close button - visible on all screen sizes */}
          <button
            onClick={() => setIsSidebarOpen(false)}
            className="p-2 text-gray-500 hover:text-gray-700"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Sidebar Navigation */}
        <nav className="p-4 space-y-2 flex-1 overflow-y-auto">
          <button
            onClick={() => handleTabChange('all')}
            className={`w-full text-left px-4 py-3 rounded-lg transition-colors flex items-center justify-between ${
              activeTab === 'all' 
                ? 'bg-green-100 text-green-800 font-medium' 
                : 'text-gray-700 hover:bg-gray-100'
            }`}
          >
            <span className="flex items-center">
              <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              All Items
            </span>
            <span className="bg-gray-200 text-gray-600 text-xs px-2 py-1 rounded-full">
              {items.filter(item => {
                const isMyItem = item.owner_email === user?.email || 
                               item.owner_id === user?.user_id ||
                               item.owner_id === user?.google_id;
                return !isMyItem;
              }).length}
            </span>
          </button>

          <button
            onClick={() => handleTabChange('my-items')}
            className={`w-full text-left px-4 py-3 rounded-lg transition-colors flex items-center justify-between ${
              activeTab === 'my-items' 
                ? 'bg-green-100 text-green-800 font-medium' 
                : 'text-gray-700 hover:bg-gray-100'
            }`}
          >
            <span className="flex items-center">
              <User className="w-5 h-5 mr-3" />
              My Items
            </span>
            <span className="bg-gray-200 text-gray-600 text-xs px-2 py-1 rounded-full">
              {items.filter(item => 
                item.owner_email === user?.email || 
                item.owner_id === user?.user_id ||
                item.owner_id === user?.google_id
              ).length}
            </span>
          </button>

          <button
            onClick={() => handleTabChange('claimed')}
            className={`w-full text-left px-4 py-3 rounded-lg transition-colors flex items-center justify-between ${
              activeTab === 'claimed' 
                ? 'bg-green-100 text-green-800 font-medium' 
                : 'text-gray-700 hover:bg-gray-100'
            }`}
          >
            <span className="flex items-center">
              <Check className="w-5 h-5 mr-3" />
              My Claims
            </span>
            <span className="bg-gray-200 text-gray-600 text-xs px-2 py-1 rounded-full">
              {myClaims.length}
            </span>
          </button>

          <button
            onClick={() => handleTabChange('ai-recommendations')}
            className={`w-full text-left px-4 py-3 rounded-lg transition-colors flex items-center justify-between ${
              activeTab === 'ai-recommendations' 
                ? 'bg-green-100 text-green-800 font-medium' 
                : 'text-gray-700 hover:bg-gray-100'
            }`}
          >
            <span className="flex items-center">
              <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              AI Corner
            </span>
            <span className="bg-purple-100 text-purple-600 text-xs px-2 py-1 rounded-full">
              🤖
            </span>
          </button>

          {/* Rules & Regulations - RIGHT BELOW AI Corner */}
          <div className="pt-2 border-t border-gray-200">
            <button
              onClick={() => {
                setShowTermsModal(true);
                setIsSidebarOpen(false); // Close sidebar when opening modal
              }}
              className="w-full text-left px-4 py-3 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors flex items-center"
            >
              <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Rules & Regulations
            </button>
          </div>
        </nav>
      </div>

      {/* 📱 MAIN CONTENT AREA - Full Width */}
      <div className="flex-1 flex flex-col min-h-screen">
        {/* 🔧 TOP HEADER - With Hamburger for All Screen Sizes */}
        <header className="bg-white shadow-sm border-b">
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
              <div className="flex items-center">
                {/* 📱 Hamburger Menu - All Screen Sizes */}
                <button
                  onClick={() => setIsSidebarOpen(true)}
                  className="p-2 text-gray-500 hover:text-gray-700 mr-3"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                  </svg>
                </button>
                
                <h1 className="text-xl lg:text-2xl font-bold text-green-800">Project GreenHouse</h1>
              </div>
              
              <div className="flex items-center space-x-2 lg:space-x-4">
                <div className="hidden sm:flex items-center">
                  <img
                    src={user?.profile_picture || '/placeholder-avatar.png'}
                    alt="Profile"
                    className="w-6 h-6 lg:w-8 lg:h-8 rounded-full mr-2"
                    onError={(e) => e.target.src = '/placeholder-avatar.png'}
                  />
                  <span className="text-gray-700 text-sm lg:text-base">{user?.name || 'User'}</span>
                </div>

                <button
                  onClick={handleLogout}
                  className="flex items-center px-2 lg:px-3 py-2 text-gray-700 hover:text-gray-900 transition-colors"
                >
                  <LogOut className="w-4 h-4 mr-1" />
                  <span className="hidden sm:inline">Logout</span>
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* 🔧 MAIN CONTENT - Responsive with Centered Layout */}
        <main className="flex-1 px-4 sm:px-6 lg:px-8 xl:px-16 2xl:px-32 py-4 lg:py-8 max-w-7xl mx-auto w-full">
          {/* 📱 CONTROLS BAR - Responsive */}
          <div className="mb-4 lg:mb-6 space-y-4 max-w-4xl mx-auto">
            {/* Search and Filters - Only show when not on AI tab */}
            {activeTab !== 'ai-recommendations' && (
              <div className="flex flex-col sm:flex-row gap-2 lg:gap-4">
                {/* Search */}
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                  <input
                    type="text"
                    placeholder="Search items..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 text-sm lg:text-base border border-gray-300 rounded-lg focus:outline-none focus:border-green-500"
                  />
                </div>
                
                {/* Category Filter */}
                <select
                  value={filterCategory}
                  onChange={(e) => setFilterCategory(e.target.value)}
                  className="px-3 lg:px-4 py-2 text-sm lg:text-base border border-gray-300 rounded-lg focus:outline-none focus:border-green-500"
                >
                  <option value="">All Categories</option>
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>

                {/* Add Item Button */}
                <button
                  onClick={() => setShowModal(true)}
                  className="flex items-center justify-center px-3 lg:px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm lg:text-base whitespace-nowrap"
                >
                  <Plus className="w-4 h-4 mr-1" />
                  <span className="hidden sm:inline">Add Item</span>
                  <span className="sm:hidden">Add</span>
                </button>
              </div>
            )}
          </div>

          {/* 📱 CONTENT AREA - Responsive Grid with Centered Layout */}
          {activeTab !== 'ai-recommendations' && (
            <div className="max-w-6xl mx-auto">
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-4 lg:gap-6">
                {filteredItems.map(item => (
                  <ItemCard
                    key={item.item_id}
                    item={item}
                    currentUser={user}
                    onClaim={handleClaimItem}
                    onEdit={setEditingItem}
                    onDelete={handleDeleteItem}
                    onChatToggle={handleChatToggle}
                    showChat={chatState[item.item_id]}
                    chatMessages={chatMessages[item.item_id] || []}
                    onSendMessage={() => handleSendMessage(item.item_id)}
                    newMessage={newMessages[item.item_id] || ''}
                    setNewMessage={(message) => setNewMessages(prev => ({
                      ...prev,
                      [item.item_id]: message
                    }))}
                  />
                ))}
              </div>

              {filteredItems.length === 0 && (
                <div className="text-center py-12">
                  <p className="text-gray-500 text-lg">
                    {loading ? 'Loading items...' : 'No items found'}
                  </p>
                  {activeTab === 'all' && !loading && (
                    <p className="text-gray-400 mt-2">Be the first to add an item to the community!</p>
                  )}
                </div>
              )}
            </div>
          )}

          {/* 🤖 AI RECOMMENDATIONS TAB - Responsive with Centered Layout */}
          {activeTab === 'ai-recommendations' && (
            <div className="space-y-6 max-w-4xl mx-auto">
              <div className="text-center">
                <h2 className="text-xl lg:text-2xl font-bold text-green-800 mb-4">
                  AI Recommendations
                </h2>
                <p className="text-gray-600 mb-6 text-sm lg:text-base">
                  Get creative suggestions on how to reuse recyclable materials from your PUP community!
                </p>
                
                <button
                  onClick={handleGetAIRecommendations}
                  disabled={aiLoading}
                  className="px-4 lg:px-6 py-2 lg:py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-sm lg:text-base"
                >
                  {aiLoading ? (
                    <span className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-4 w-4 lg:h-5 lg:w-5 border-b-2 border-white mr-2"></div>
                      Getting Suggestions...
                    </span>
                  ) : (
                    '🌱 Get Smart Suggestions'
                  )}
                </button>
              </div>

              {/* AI Response */}
              {aiRecommendations && (
                <div className="bg-white rounded-lg shadow-md p-4 lg:p-6">
                  <div className="whitespace-pre-wrap text-gray-700 leading-relaxed text-sm lg:text-base">
                    {aiRecommendations}
                  </div>
                </div>
              )}

              {/* Error Display */}
              {aiError && (
                <div className="bg-red-50 border border-red-200 text-red-700 rounded-lg p-4">
                  <div className="flex items-center">
                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                    <span className="text-sm lg:text-base">{aiError}</span>
                  </div>
                </div>
              )}

              {/* No recommendations yet */}
              {!aiRecommendations && !aiLoading && !aiError && (
                <div className="text-center py-12">
                  <div className="text-4xl lg:text-6xl mb-4">🤖</div>
                  <p className="text-gray-500 text-lg">
                    Click the button above to get personalized recycling suggestions!
                  </p>
                  <p className="text-gray-400 text-sm mt-2">
                    Our AI will analyze available materials and give you creative Filipino ideas!
                  </p>
                </div>
              )}
            </div>
          )}
        </main>
      </div>

      {/* Your existing modals stay the same */}
      <ItemModal
        isOpen={showModal || !!editingItem}
        onClose={() => {
          setShowModal(false);
          setEditingItem(null);
        }}
        item={editingItem}
        onSave={editingItem ? handleEditItem : handleAddItem}
        locations={locations}
        categories={categories}
      />
      
      <TermsViewModal
        isOpen={showTermsModal}
        onClose={() => setShowTermsModal(false)}
      />
    </div>
  );
};